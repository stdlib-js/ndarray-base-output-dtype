// Copyright (c) 2025 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-floating-point-data-type@v0.2.2-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-real-floating-point-data-type@v0.2.2-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-complex-floating-point-data-type@v0.2.2-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-integer-data-type@v0.2.2-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-signed-integer-data-type@v0.2.2-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-unsigned-integer-data-type@v0.2.2-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-real-data-type@v0.2.2-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-numeric-data-type@v0.2.2-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-boolean-data-type@v0.1.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-integer-index-data-type@esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-boolean-index-data-type@esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-mask-index-data-type@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-data-type@v0.2.2-esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-promote-dtypes@esm/index.mjs";import _ from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-defaults@v0.3.0-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-join@v0.1.1-esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/error-tools-fmtprodmsg@v0.2.2-esm/index.mjs";var j=_.get("dtypes.default"),u=_.get("dtypes.default_index"),b=_.get("dtypes.signed_integer"),h=_.get("dtypes.unsigned_integer"),v=_.get("dtypes.real_floating_point"),x={default:function(){return j},default_index:function(){return u},same:function(e){var t,n;for(t=e[0],n=1;n<e.length;n++)if(e[n]!==t)throw new Error(c('invalid argument. Unable to resolve an output data type. The output data type policy is "same" and yet the input data types are not equal. Data types: [%s].',f(e,", ")));return t},promoted:D,accumulation:function(t){var n=D(t);if(e(n)||"generic"===n)return n;if(r(n))return y([n,h]);if(i(n))return y([n,b]);return v}},w={floating_point:[e,_.get("dtypes.floating_point")],floating_point_and_generic:[k(e),_.get("dtypes.floating_point")],real_floating_point:[t,v],real_floating_point_and_generic:[k(t),v],complex_floating_point:[n,_.get("dtypes.complex_floating_point")],complex_floating_point_and_generic:[k(n),_.get("dtypes.complex_floating_point")],integer:[s,_.get("dtypes.integer")],integer_and_generic:[k(s),_.get("dtypes.integer")],signed_integer:[i,b],signed_integer_and_generic:[k(i),b],unsigned_integer:[r,h],unsigned_integer_and_generic:[k(r),h],real:[a,_.get("dtypes.real")],real_and_generic:[k(a),_.get("dtypes.real")],numeric:[d,_.get("dtypes.numeric")],numeric_and_generic:[k(d),_.get("dtypes.numeric")],boolean:[o,_.get("dtypes.boolean")],boolean_and_generic:[k(o),_.get("dtypes.boolean")],integer_index:[p,_.get("dtypes.integer_index")],integer_index_and_generic:[k(p),_.get("dtypes.integer_index")],boolean_index:[g,_.get("dtypes.boolean_index")],boolean_index_and_generic:[k(g),_.get("dtypes.boolean_index")],mask_index:[l,_.get("dtypes.mask_index")],mask_index_and_generic:[k(l),_.get("dtypes.mask_index")]};function k(e){return function(t){return"generic"===t||e(t)}}function D(e){var t=y(e);if(null===t)throw new Error(c("invalid argument. Unable to apply type promotion rules when resolving a data type to which the input data types can be safely cast. Data types: [%s].",f(e,", ")));return t}function E(e,t){var n,s;if(m(t))return t;if(void 0!==(s=x[t]))return s(e);if(n=D(e),void 0!==(s=w[t]))return s[0](n)?n:s[1];throw new TypeError(c("nullDw",t))}export{E as default};
//# sourceMappingURL=index.mjs.map
